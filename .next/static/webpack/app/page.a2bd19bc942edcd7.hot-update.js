"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/services/api.js":
/*!*********************************!*\
  !*** ./src/app/services/api.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminApi: () => (/* binding */ adminApi),\n/* harmony export */   publicApi: () => (/* binding */ publicApi)\n/* harmony export */ });\nconst BACKEND_URL = \"https://oxytoxin-backend.vercel.app\";\n// Public API calls\nconst publicApi = {\n    // Get all products\n    getProducts: async function() {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, refreshTrigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        try {\n            const { category, search, minPrice, maxPrice, inStock } = filters;\n            const queryParams = new URLSearchParams();\n            if (category && category !== \"all\") queryParams.append(\"category\", category);\n            if (search) queryParams.append(\"search\", search);\n            if (minPrice) queryParams.append(\"minPrice\", minPrice);\n            if (maxPrice) queryParams.append(\"maxPrice\", maxPrice);\n            if (inStock) queryParams.append(\"inStock\", inStock);\n            // Add timestamp to prevent caching\n            queryParams.append(\"_t\", Date.now());\n            // Use the public endpoint\n            const url = \"\".concat(BACKEND_URL, \"/api/public/products?\").concat(queryParams);\n            console.log(\"[API] Fetching products from:\", url);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                    Pragma: \"no-cache\",\n                    Expires: \"0\"\n                },\n                cache: \"no-store\",\n                next: {\n                    revalidate: 0\n                }\n            });\n            console.log(\"[API] Response status:\", response.status);\n            console.log(\"[API] Response headers:\", Object.fromEntries(response.headers.entries()));\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"[API] Error response:\", {\n                    status: response.status,\n                    statusText: response.statusText,\n                    headers: Object.fromEntries(response.headers.entries()),\n                    body: errorText\n                });\n                throw new Error(\"HTTP error! status: \".concat(response.status, \", message: \").concat(errorText));\n            }\n            const result = await response.json();\n            console.log(\"[API] Response data:\", result);\n            if (!result || typeof result !== \"object\") {\n                throw new Error(\"Invalid response format from server\");\n            }\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Unknown error from server\");\n            }\n            if (!Array.isArray(result.data)) {\n                console.warn(\"[API] Expected array of products but got:\", result.data);\n                return [];\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"[API] Error fetching products:\", {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            });\n            throw new Error(\"Failed to fetch products: \".concat(error.message));\n        }\n    }\n};\n// Admin API calls\nconst adminApi = {\n    // Get all products\n    getProducts: async ()=>{\n        try {\n            const url = \"\".concat(BACKEND_URL, \"/api/admin/products\");\n            console.log(\"[API] Admin fetching products from:\", url);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n                    Pragma: \"no-cache\",\n                    Expires: \"0\"\n                },\n                cache: \"no-store\"\n            });\n            console.log(\"[API] Admin response status:\", response.status);\n            console.log(\"[API] Admin response headers:\", Object.fromEntries(response.headers.entries()));\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"[API] Admin error response:\", {\n                    status: response.status,\n                    statusText: response.statusText,\n                    headers: Object.fromEntries(response.headers.entries()),\n                    body: errorText\n                });\n                throw new Error(\"HTTP error! status: \".concat(response.status, \", message: \").concat(errorText));\n            }\n            const result = await response.json();\n            console.log(\"[API] Admin response data:\", result);\n            if (!result || typeof result !== \"object\") {\n                throw new Error(\"Invalid response format from server\");\n            }\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Unknown error from server\");\n            }\n            if (!Array.isArray(result.data)) {\n                console.warn(\"[API] Expected array of products but got:\", result.data);\n                return [];\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"[API] Error fetching admin products:\", {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            });\n            throw new Error(\"Failed to fetch products: \".concat(error.message));\n        }\n    },\n    // Create new product\n    createProduct: async (productData)=>{\n        try {\n            const url = \"\".concat(BACKEND_URL, \"/api/admin/products\");\n            console.log(\"Creating product:\", productData);\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Cache-Control\": \"no-cache\"\n                },\n                body: JSON.stringify(productData)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Error response:\", errorText);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Failed to create product\");\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"Error creating product:\", error);\n            throw error;\n        }\n    },\n    // Update product\n    updateProduct: async (id, productData)=>{\n        try {\n            const url = \"\".concat(BACKEND_URL, \"/api/admin/products/\").concat(id);\n            console.log(\"Updating product:\", {\n                id,\n                productData\n            });\n            const response = await fetch(url, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Cache-Control\": \"no-cache\"\n                },\n                body: JSON.stringify(productData)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Error response:\", errorText);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Failed to update product\");\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"Error updating product:\", error);\n            throw error;\n        }\n    },\n    // Delete product\n    deleteProduct: async (id)=>{\n        try {\n            const url = \"\".concat(BACKEND_URL, \"/api/admin/products/\").concat(id);\n            console.log(\"Deleting product:\", id);\n            const response = await fetch(url, {\n                method: \"DELETE\",\n                headers: {\n                    \"Cache-Control\": \"no-cache\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Error response:\", errorText);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Failed to delete product\");\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"Error deleting product:\", error);\n            throw error;\n        }\n    },\n    // Upload image\n    uploadImage: async (formData)=>{\n        try {\n            const url = \"\".concat(BACKEND_URL, \"/api/admin/upload\");\n            console.log(\"Uploading image\");\n            const response = await fetch(url, {\n                method: \"POST\",\n                body: formData,\n                headers: {\n                    \"Cache-Control\": \"no-cache\"\n                }\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Error response:\", errorText);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const result = await response.json();\n            if (result.status === \"error\") {\n                throw new Error(result.message || \"Failed to upload image\");\n            }\n            return result.data;\n        } catch (error) {\n            console.error(\"Error uploading image:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/services/api.js\n"));

/***/ })

});